generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  USER
  ADMIN
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  phoneNumber   String      @unique
  email         String?     @unique
  password      String
  role        Role     @relation(fields: [roleId], references: [id])
  isVerified    Boolean     @default(false)
  address       String?

  roleId      String
  otpCode     String?  
  otpExpires  DateTime?

  orders        Order[]
  reviews       Review[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  Rating Rating[]

  Wishlist Wishlist[]

  Transaction Transaction[]
}

model Role {
  id          String       @id @default(uuid())
  name        RoleEnum     @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String      @id @default(uuid())
  roleId       String
  permissionId String
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model ProductCategory {
  id          String       @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  parentId    String?
  parent      ProductCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")

  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id               String         @id @default(uuid())
  name             String
  description      String?
  price            Float
  stockQuantity    Int
  discount         Float?
  isActive         Boolean     @default(true)
  imageUrl         String?
  categoryId       String
  category         ProductCategory @relation(fields: [categoryId], references: [id])
  
  orderProducts    OrderProduct[]
  reviews          Review[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  Rating Rating[]

  ProductVariant ProductVariant[]

  WishlistItem WishlistItem[]
}

model ProductVariant {
  id          String      @id @default(uuid())
  productId   String
  sku         String   @unique
  price       Float
  stock       Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id])
  options     ProductVariantOption[]

  @@unique([productId, sku])
}

model ProductVariantOption {
  id         String      @id @default(uuid())
  variantId  String
  name       String
  value      String
  createdAt  DateTime @default(now())

  variant    ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([variantId, name, value])
}

model Order {
  id             String          @id @default(uuid())
  userId         String
  status         String
  totalPrice     Float
  paymentMethod  String
  paymentStatus  String
  shippingAddress String
  orderDate      DateTime     @default(now())
  shippingDate   DateTime?
  deliveredAt    DateTime?

  user           User         @relation(fields: [userId], references: [id])
  orderProducts  OrderProduct[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  Payment Payment[]
}

model OrderProduct {
  orderId   String    
  productId String    
  quantity  String    
  price     Float

  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Review {
  id         String      @id @default(uuid())
  rating     Int
  comment    String?
  userId     String
  productId  String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Rating {
  id         String      @id @default(uuid())
  rating     Int
  userId     String
  productId  String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String    @unique
  createdAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id         String    @id @default(uuid())
  wishlistId String
  productId  String

  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id          String      @id @default(uuid())
  orderId     String
  amount      Float
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())

  order       Order    @relation(fields: [orderId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          String      @id @default(uuid())
  userId      String
  paymentId   String
  amount      Float
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  payment     Payment  @relation(fields: [paymentId], references: [id])
}



